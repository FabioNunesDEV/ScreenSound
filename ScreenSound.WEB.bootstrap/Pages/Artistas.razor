@page "/artistas"
@inject ArtistasAPI artistasAPI

<h3>Artistas</h3>

@if (erro != null)
{
    <div class="alert alert-danger">@erro</div>
}
else if (artistasPorPagina == null)
{
    <p>Carregando...</p>
}
else if (!artistasPorPagina.Any())
{
    <p>Nenhum artista encontrado.</p>
}
else
{
    <div class="row">
        @foreach (var artista in artistasPorPagina)
        {
            <div class="col-md-4">
                <CardArtista Artista="@(new ArtistaRequest (artista.Nome, artista.Bio, artista.FotoPerfil))" />
            </div>
        }
    </div>
}

@code {
    private ICollection<ArtistaResponse>? artistas;
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;
    private ICollection<ArtistaResponse>? artistasPorPagina;
    private string? erro;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            artistas = await artistasAPI.GetArtistasAsync();
            if (artistas is not null)
            {
                artistas = artistas.OrderByDescending(a => a.Id).ToList();
                totalItens = artistas.Count();
                totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
                this.PaginaMudou(1);
            }
            else
            {
                erro = "Não foi possível recuperar os artistas.";
            }
        }
        catch (Exception ex)
        {
            erro = $"Erro ao carregar artistas: {ex.Message}";
        }
    }

    private void PaginaMudou(int pageNumber)
    {
        if (artistas == null) return;
        var indice = pageNumber - 1;
        artistasPorPagina = artistas
            .Skip(tamanho * indice)
            .Take(tamanho)
            .ToList();
    }
}

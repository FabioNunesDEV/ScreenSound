@page "/editarArtista/{id:int}"
@inject ArtistasAPI artistasAPI
@inject StorageAPI storageAPI
@inject NavigationManager Navigation

<h3>EditarArtista</h3>

@if (!string.IsNullOrEmpty(alertMessage))
{
    <div class="alert @alertClass" role="alert">
        @alertMessage
    </div>
}

<img src="data:image/jpeg;base64,@base64" alt="Foto do Artista" style="max-width: 200px; max-height: 200px;" />
<InputFile id="card-banda" OnChange="OnInputFileChange" accept="image/jpeg" class="form-control mb-3" />

<h4>@artistaRequestEdit?.Nome</h4>

<textarea class="form-control" rows="3" @bind="bioEditavel"></textarea>

<input type="button" class="btn btn-info" value="salvar" @onclick="Gravar" />

@code {

    [Parameter]
    public int id { get; set; }

    private ArtistaResponse? artista;
    private ArtistaRequestEdit? artistaRequestEdit;
    private string bioEditavel = string.Empty;
    private string? base64 = "";

    // Variáveis para mensagem
    private string alertMessage = string.Empty;
    private string alertClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            artista = await artistasAPI.GetArtistaPorIdAsync(id);
            if (artista is not null)
            {
                artistaRequestEdit = new ArtistaRequestEdit
                (
                    artista.Id,
                    artista.Nome,
                    artista.Bio,
                    artista.FotoPerfil
                );

                bioEditavel = artista.Bio;

                if (!string.IsNullOrEmpty(artista.FotoPerfil))
                {
                    base64 = await storageAPI.DownloadFileAsync(artista.FotoPerfil);
                }
                else
                {
                    base64 = await storageAPI.DownloadFileAsync("card_padrao.jpg");
                }

                base64 = base64?.Trim('"') ?? string.Empty;
            }
        }
        catch (Exception ex)
        {
            artista = null;
            bioEditavel = string.Empty;
            Console.WriteLine($"Erro ao carregar o artista: {ex.Message}");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            base64 = Convert.ToBase64String(bytes);
        }
    }

    private async Task Gravar(MouseEventArgs args)
    {
        try
        {
            if (artistaRequestEdit is not null)
            {
                // Atualiza a imagem se ela foi alterada
                if (!string.IsNullOrEmpty(base64))
                {
                    await storageAPI.UploadFileAsync(base64, artista.FotoPerfil);
                }

                var updatedArtista = artistaRequestEdit with { Bio = bioEditavel };
                await artistasAPI.UpdateArtistaAsync(updatedArtista);

                alertMessage = "Artista atualizado com sucesso!";
                alertClass = "alert-success";
                StateHasChanged();

                await Task.Delay(2000);
                Navigation.NavigateTo("/artistas"); 
            }
        }
        catch (Exception ex)
        {
            alertMessage = "Erro ao atualizar artista: " + ex.Message;
            alertClass = "alert-danger";
            StateHasChanged();
        }
    }
}